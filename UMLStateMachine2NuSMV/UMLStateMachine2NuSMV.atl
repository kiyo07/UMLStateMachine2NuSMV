-- @path NuSMV=/NuSMVCodeGenerator/ref/NuSMV.ecore
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML

module UMLStateMachine2NuSMV;
create OUT : NuSMV from IN : UML;

rule UML2NuSMV {
	from
		model : UML!Model
	to 
		smv : NuSMV!NuSmvModel (
			modules <- main
		),
		main : NuSMV!Module (
			name <- 'main',
			-- var definition
			moduleElement <- vardef,
			-- assign definition
			moduleElement <- assign
		), 
		vardef : NuSMV!VariableDeclaration (
			-- state var definition 
			vars <- model.packagedElement
					->select(e | e.oclIsTypeOf(UML!StateMachine) and e.isSMqa())
					->collect(e | thisModule.SM2StateVar(e)),
			-- action var definition
			vars <- model.packagedElement
					->select(e | e.oclIsTypeOf(UML!Class) and e.isActionEVP())
					->collect(e | thisModule.SM2ActionVar(e)),
			-- module var definition
			vars <- model.packagedElement
					->select(e | e.oclIsTypeOf(UML!StateMachine) and e.isSMqa())
					->collect(e | thisModule.SMqa2ModuleVar(e)),
			vars <- model.packagedElement
					->select(e | e.oclIsTypeOf(UML!StateMachine) and e.isSMac())
					->collect(e | thisModule.SMac2ModuleVar(e))
		),
		assign : NuSMV!AssignConstraintElement (
			-- state var init
			bodies <- model.packagedElement
					->select(e | e.oclIsTypeOf(UML!StateMachine) and e.isSMqa())
					->collect(e | thisModule.SM2StateVarInit(e)),
			-- action var init
			bodies <- model.packagedElement
					->select(e | e.oclIsTypeOf(UML!Class) and e.isActionEVP())
					->collect(e | thisModule.SM2ActionVarInit(e))
		)
}

unique lazy rule SM2StateVar {
	from 
		sm : UML!StateMachine
	to 
		state : NuSMV!VarBody (
			name <- sm.getStateVar(),
			semicolon <- true,
			type <- enum
		),
		enum : NuSMV!EnumType (
			val <- sm.getStateValSeq()->collect(e | thisModule.genVal(e))
		)
	do {
		state;
	}
}

unique lazy rule SM2ActionVar {
	from
		class : UML!Class
	to 
		classvar : NuSMV!VarBody (
			name <- class.name,
			semicolon <- true,
			type <- enum
		),
		enum : NuSMV!EnumType (
			val <- class.ownedOperation->collect(e | thisModule.genVal(e.name))
		)
	do {
		classvar;
	}
}

unique lazy rule SMqa2ModuleVar {
	from 
		sm : UML!StateMachine
	to 
		modul : NuSMV!VarBody (
			name <- sm.getStateVar(),
			semicolon <- true,
			type <- moduletype
		),
		moduletype : NuSMV!ModuleType (
			params <- thisModule.genFormalParam(sm.getStateVar()),
			params <- sm.getCorrespondingClass().ownedAttribute->collect(e | thisModule.genFormalParam(e.name))
		)
	do {
		modul;
	}
}

unique lazy rule SMac2ModuleVar {
	from 
		sm : UML!StateMachine
	to 
		modul : NuSMV!VarBody (
			name <- sm.name.split('SMac4').last(),
			semicolon <- true,
			type <- moduletype
		),
		moduletype : NuSMV!ModuleType (
			params <- sm.getTransitionVars(),
			params <- sm.getCorrespondingClass().ownedAttribute->collect(e | thisModule.genFormalParam(e.name))
		)
	do {
		modul;
	}
}

unique lazy rule SM2StateVarInit {
	from
		sm : UML!StateMachine
	to
		init : NuSMV!InitBody (
			var <- thisModule.genVar(sm.getStateVar()),
			initial <- thisModule.genValueExpression(sm.getStateValSeq().first())
		)
}

unique lazy rule SM2ActionVarInit {
	from
		class : UML!Class
	to
		init : NuSMV!InitBody (
			var <- thisModule.genVar(class.name),
			initial <- thisModule.genValueExpression('none')
		)
}

rule SMqa2Module {
	from
		sm : UML!StateMachine (sm.isSMqa())
	to 
		modul : NuSMV!Module (
			name <- sm.name,
			params <- thisModule.genFormalParam(sm.getStateVar()),
			params <- sm.getCorrespondingClass().ownedAttribute->collect(e | thisModule.genFormalParam(e.name)),
			moduleElement <- assign
		),
		assign : NuSMV!AssignConstraintElement (
			bodies <- next
		),
		next : NuSMV!NextBody(
			var <- thisModule.genVar(sm.getStateVar()),
			dotted <- case
		),
		case : NuSMV!CaseSimpleExpression (
			branches <- sm.region.first().transition
						->collect(e | thisModule.SMqaTransition2CaseBranch(e)),
			branches <- truecase
		),
		truecase : NuSMV!CaseSimpleAssignementExpression (
			case <- thisModule.genValueExpression('TRUE'),
			assignment <- thisModule.genValueExpression(sm.getStateVar())
		)
}

rule SMac2Module{
	from
		sm : UML!StateMachine (sm.isSMac())
	to 
		modul : NuSMV!Module (
			name <- sm.name,
			params <- sm.getTransitionVars(),
			params <- sm.getCorrespondingClass().ownedAttribute->collect(e | thisModule.genFormalParam(e.name)),
			moduleElement <- vardef,
			moduleElement <- assign
		),
		vardef : NuSMV!VariableDeclaration (
			vars <- thisModule.SM2StateVar(sm)
		),
		assign : NuSMV!AssignConstraintElement (
			bodies <-thisModule.SM2StateVarInit(sm),
			bodies <- state_next,
			bodies <- action_next
		),
		-- next expr for state var
		state_next : NuSMV!NextBody(
			var <- thisModule.genVar(sm.getStateVar()),
			dotted <- state_case
		),
		state_case : NuSMV!CaseSimpleExpression (
			branches <- sm.region.first().transition
						->collect(e | thisModule.SMacTransitionEffect2CaseBranch(e)),
			branches <- state_truecase
		),
		state_truecase : NuSMV!CaseSimpleAssignementExpression (
			case <- thisModule.genValueExpression('TRUE'),
			assignment <- thisModule.genValueExpression(sm.getStateVar())
		),
		-- next expr for action var
		action_next : NuSMV!NextBody (
			var <- sm.getCorrespondingClass().ownedAttribute->collect(e | thisModule.genFormalParam(e.name)).first(),
			dotted <- action_case
		),
		action_case : NuSMV!CaseSimpleExpression (
			branches <- sm.region.first().transition
						->collect(e | thisModule.SMacTransitionGuard2CaseBranch(e)),
			branches <- action_truecase
		),
		action_truecase : NuSMV!CaseSimpleAssignementExpression (
			case <- thisModule.genValueExpression('TRUE'),
			assignment <- sm.getCorrespondingClass().ownedAttribute->collect(e | thisModule.genValueExpression(e.name)).first()
		)
}

rule SMqaTransition2CaseBranch(trans : UML!Transition) {
	to 
		branch : NuSMV!CaseSimpleAssignementExpression (
			case <- exp,
			assignment <- thisModule.genValueExpression(trans.target.getStateVal())
		),	
		exp : NuSMV!BinaryExpression (
			left <- thisModule.genValueExpression(trans.source.name),
			operator <- '&',
			right <- thisModule.genValueExpression(trans.trigger.first().name.replaceAll('.', '='))
		)
	do {
		branch;
	}
}

rule SMacTransitionEffect2CaseBranch(trans : UML!Transition) {
	to 
		branch : NuSMV!CaseSimpleAssignementExpression (
			case <- exp,
			assignment <- thisModule.genValueExpression(trans.target.getStateVal())
		),	
		exp : NuSMV!BinaryExpression (
			left <- thisModule.genValueExpression(trans.source.name),
			operator <- '&',
			right <- thisModule.genValueExpression(trans.effect.name.replaceAll('.', '='))
		)
	do {
		branch;
	}
}

rule SMacTransitionGuard2CaseBranch(trans : UML!Transition) {
	to 
		branch : NuSMV!CaseSimpleAssignementExpression (
			case <- exp,
			assignment <- thisModule.genValueExpression(trans.effect.name.substring(trans.effect.name.indexOf('.') + 2, trans.effect.name.size()))
		),	
		exp : NuSMV!BinaryExpression (
			left <- thisModule.genValueExpression(trans.source.name),
			operator <- '&',
			right <- thisModule.genValueExpression(trans.guard.specification.body.first())
		)
	do {
		branch;
	}
}

rule genVar(str : String) {
	to 
		var : NuSMV!VarBody (
			name <- str
		)
	do {
		var;
	}
}

rule genVal(str : String) {
	to 
		val : NuSMV!Val (
			name <- str
		)
	do {
		val;
	}
}

rule genValueExpression(str : String) {
	to 
		exp : NuSMV!ValueExpression (
			value <- str
		)
	do {
		exp;
	}
}

rule genFormalParam(str : String) {
	to 
		param : NuSMV!FormalParameter (
			name <- str
		)
	do {
		param;
	}
}

helper context UML!StateMachine def : getStateVar() : String = 
	let name : String = self.region.first().subvertex.first().name 
	in name.substring(1, name.indexOf('='));

helper context UML!StateMachine def : getStateValSeq() : Sequence(String) = 
	let names : Sequence(String) = self.region.first().subvertex->collect(e | e.name)
	in names->collect(e | e.substring(e.indexOf('=') + 2, e.size()));

helper context UML!StateMachine def : getCorrespondingClass() : UML!Class = 
	let name : String = self.name
	in UML!Class.allInstances()
		->select(e | e.oclIsTypeOf(UML!Class) and e.name = name).first();

helper context UML!Vertex def : getStateVal() : String = 
	let name : String = self.name 
	in name.substring(name.indexOf('=') + 2, name.size());

helper context UML!StateMachine def : getTransitionVars() : Sequence(NuSMV!FormalParameter) = 
	let trans_cond : String = self.region.first().transition.first().guard.specification.body.first()
	in trans_cond.split('&')->collect(e | thisModule.genFormalParam(e.substring(1, e.indexOf('='))));

helper context UML!PackageableElement def : isActionEVP() : Boolean = 
	if self.name.oclIsUndefined() then false 
	else if self.name.startsWith('action') then true 
	else false 
	endif endif;

helper context UML!PackageableElement def : isSMqa() : Boolean = 
	if self.name.oclIsUndefined() then false 
	else if self.name.startsWith('SMqa') then true 
	else false 
	endif endif;

helper context UML!PackageableElement def : isSMac() : Boolean = 
	if self.name.oclIsUndefined() then false 
	else if self.name.startsWith('SMac') then true 
	else false 
	endif endif;
